services:
  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
    healthcheck:
      test: ["CMD-SHELL", "zkServer.sh status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 90s
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"  # Map host:9093 to container:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./kafka-init.sh:/kafka-init.sh
    command: >
      bash -c "
        /etc/confluent/docker/run &
        sleep 30 &&
        /bin/bash /kafka-init.sh &&
        wait
      "
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kafka-network

  train_model:
    image: stock-prediction-engine
    build:
      context: .
      dockerfile: Dockerfile
    container_name: train_model
    environment:
      - IN_DOCKER=true
    volumes:
      - ./models:/app/models
      - ./config:/app/config
    command: python src/train_model.py
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network

  app:
    image: stock-prediction-engine
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    container_name: app
    environment:
      - IN_DOCKER=true
    volumes:
      - ./models:/app/models
      - ./config:/app/config
      - ./checkpoint:/app/checkpoint
    command: python src/app.py
    depends_on:
      kafka:
        condition: service_healthy
      train_model:
        condition: service_completed_successfully
    networks:
      - kafka-network

  producer:
    image: stock-prediction-engine
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    container_name: producer
    environment:
      - IN_DOCKER=true
    volumes:
      - ./config:/app/config
    command: python src/producer.py
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network

  consumer:
    image: stock-prediction-engine
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    container_name: consumer
    environment:
      - IN_DOCKER=true
    volumes:
      - ./config:/app/config
    command: python src/consumer.py
    depends_on:
      kafka:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - kafka-network

volumes:
  kafka_data:

networks:
  kafka-network:
    driver: bridge